"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const order_controller_1 = require("../controllers/order.controller");
const auth_1 = require("../middleware/auth");
const router = express_1.default.Router();
// üîê –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', auth_1.authenticateTelegram, order_controller_1.getAllOrders);
// üîç –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–∞—Å—Å–∞–∂–∏—Ä–∞
router.get('/active', auth_1.authenticateTelegram, order_controller_1.getActiveOrders);
// üöó –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è
router.get('/driver-active', auth_1.authenticateTelegram, order_controller_1.getDriverActiveOrders);
// üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
router.post('/', auth_1.authenticateTelegram, order_controller_1.createOrder);
// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
router.put('/:id', auth_1.authenticateTelegram, order_controller_1.updateOrder);
// ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑
router.put('/:id/complete', auth_1.authenticateTelegram, order_controller_1.completeOrder);
// üí∞ –°–¥–µ–ª–∞—Ç—å —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
router.post('/:id/offer', auth_1.authenticateTelegram, order_controller_1.createPriceOffer);
// ‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
router.post('/:id/offer/accept', auth_1.authenticateTelegram, order_controller_1.acceptOffer);
// ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
router.post('/:id/offer/reject', auth_1.authenticateTelegram, order_controller_1.rejectOffer);
// üöó –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É
router.post('/:id/start', auth_1.authenticateTelegram, order_controller_1.startOrder);
// üóë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
router.post('/:id/cancel', auth_1.authenticateTelegram, order_controller_1.cancelOrder);
exports.default = router;
